const { cmd } = require('../command');

const axios = require('axios');

// OpenWeatherMap API Key (‡∂î‡∂∂‡∑ö API key ‡∂ë‡∂ö ‡∂∫‡∑ú‡∂Ø‡∂Ω‡∑è ‡∂≠‡∑í‡∂∫‡∑ô‡∂±‡∑ä‡∂±‡∑ö)

const API_KEY = 'e903424213daaf469794874970b06f5f';

// Weather command

cmd({

    pattern: "weather",

    desc: "Get current weather information for any city or country.",

    alias: ["wthr"],

    category: "utility",

    react: "üå§Ô∏è",

    filename: __filename

}, async (conn, mek, m, { from, q, reply }) => {

    try {

        const location = q.trim();

        if (!location) return reply("‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂±‡∂ú‡∂ª‡∂∫‡∂ö‡∑ä ‡∑Ñ‡∑ù ‡∂ª‡∂ß‡∂ö‡∑ä ‡∂á‡∂≠‡∑î‡∂Ω‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±. ‡∂ã‡∂Ø‡∑è: .weather Colombo");

        // OpenWeatherMap API request

        const url = `http://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${API_KEY}&units=metric`;

        const response = await axios.get(url);

        const weatherData = response.data;

        // Extract relevant weather information

        const cityName = weatherData.name;

        const country = weatherData.sys.country;

        const temperature = weatherData.main.temp;

        const feelsLike = weatherData.main.feels_like;

        const humidity = weatherData.main.humidity;

        const windSpeed = weatherData.wind.speed;

        const description = weatherData.weather[0].description;

        // Format the weather message

        let weatherMessage = `üå§Ô∏è *${cityName}, ${country} ‡∑Ñ‡∑í ‡∂ö‡∑è‡∂Ω‡∂ú‡∑î‡∂´ ‡∂≠‡∂≠‡∑ä‡∂≠‡∑ä‡∑Ä‡∂∫*\n\n`;

        weatherMessage += `*‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª‡∂∫:* ${description}\n`;

        weatherMessage += `*üå°Ô∏è ‡∂ã‡∑Ç‡∑ä‡∂´‡∂≠‡∑ä‡∑Ä‡∂∫:* ${temperature}¬∞C\n`;

        weatherMessage += `*ü•µ ‡∑Ñ‡∑ê‡∂ü‡∑ô‡∂± ‡∂ã‡∑Ç‡∑ä‡∂´‡∂≠‡∑ä‡∑Ä‡∂∫:* ${feelsLike}¬∞C\n`;

        weatherMessage += `*üíß ‡∂Ü‡∂ª‡∑ä‡∂Ø‡∑ä‚Äç‡∂ª‡∂≠‡∑è‡∑Ä‡∂∫:* ${humidity}%\n`;

        weatherMessage += `*üí® ‡∑É‡∑î‡∑Ö‡∂Ç ‡∑Ä‡∑ö‡∂ú‡∂∫:* ${windSpeed} m/s\n\n`;

        weatherMessage += `*¬© MANJU MD Bot*`;

        // Send the weather information with context info similar to SinhalaSub.js

        await conn.sendMessage(from, {

            text: weatherMessage,

            contextInfo: {

                forwardingScore: 999,

                isForwarded: true,

                forwardedNewsletterMessageInfo: {

                    newsletterName: 'M·¥Ä…¥·¥ä·¥ú_·¥ç·¥Ö I…¥“ì·¥è',

                    newsletterJid: "",

                },

                externalAdReply: {

                    title: '|M·¥Ä…¥·¥ä·¥ú_·¥ç·¥Ö ·¥°·¥á·¥Ä·¥õ ú·¥á Ä …™…¥“ì·¥è',

                    body: ' M·¥Ä…¥·¥ä·¥ú_·¥ç·¥Ö ·¥°·¥Ä  ô·¥è·¥õ  ô·¥áÍú±·¥á·¥Ö ·¥è…¥  ô·¥Ä…™ è ü·¥áÍú±',

                    mediaType: 1,

                    sourceUrl: "https://youtu.be/xSArkTWDXBs?si=447mUzkhuNcjvRYK",

                    thumbnailUrl: 'https://raw.githubusercontent.com/Manju362/Link-gamu./refs/heads/main/IMG-20250421-WA0296.jpg',

                    renderLargerThumbnail: false,

                    showAdAttribution: true

                }

            }

        }, { quoted: mek });

        await conn.sendMessage(from, {

            react: { text: '‚úÖ', key: mek.key }

        });

    } catch (error) {

        console.error('‡∂ö‡∑è‡∂Ω‡∂ú‡∑î‡∂´ ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä:', error.response ? error.response.data : error.message);

        await conn.sendMessage(from, {

            react: { text: '‚ùå', key: mek.key }

        });

        if (error.response && error.response.status === 404) {

            reply("‡∂±‡∂ú‡∂ª‡∂∫ ‡∑Ñ‡∑ù ‡∂ª‡∂ß ‡∑Ñ‡∂∏‡∑î ‡∑Ä‡∑î‡∂´‡∑ö ‡∂±‡∑ê‡∑Ñ‡∑ê. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂±‡∂∏‡∂ö‡∑ä ‡∂á‡∂≠‡∑î‡∂Ω‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±. ‡∂ã‡∂Ø‡∑è: .weather Colombo");

        } else if (error.response && error.response.status === 401) {

            reply("API Key ‡∂ë‡∂ö ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂±‡∑ê‡∑Ñ‡∑ê. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª API Key ‡∂ë‡∂ö ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∑Ñ‡∑ù ‡∂±‡∑Ä API Key ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è‡∂ú‡∂±‡∑ä‡∂±.");

        } else {

            reply("‡∂ö‡∑è‡∂Ω‡∂ú‡∑î‡∂´ ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∂´‡∑è. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑É‡∑î‡∑Ä ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");

        }

    }

});