const axios = require("axios");
const cheerio = require("cheerio");

module.exports = {
  cmd: ['film'],
  help: '‡∑É‡∑í‡∂±‡∂∏‡∑è ‡∂Ω‡∑í‡∂¥‡∑í‡∂±‡∂∫‡∂ö‡∑ä ‡∑Ñ‡∑ù ‡∂±‡∑è‡∂∏‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ì ‡∑É‡∑í‡∂±‡∂∏‡∑è ‡∂¥‡∑í‡∑Ö‡∑í‡∂∂‡∂≥ ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∑É‡∑Ñ ‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ö ‡∑É‡∂∂‡∑ê‡∂≥‡∑í ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ä‡∂±',
  desc: 'Movie Downloader with Sinhala UI',
  use: '.film [movie name or link]',
  category: 'Movie Downloader',
  async handler(m, { text, args, used, prefix, command }) {
    if (!text) return m.reply("‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∑É‡∑í‡∂±‡∂∏‡∑è ‡∂±‡∑è‡∂∏‡∂∫ ‡∑Ñ‡∑ù link ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±.");

    const searchUrl = `https://cinesubz.xyz/?s=${encodeURIComponent(text)}`;
    const headers = {
      "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
    };

    // --- Step 1: Search for movies ---
    let searchRes = await axios.get(searchUrl, { headers });
    const $ = cheerio.load(searchRes.data);
    let movies = [];

    $('.result-item').each((i, el) => {
      const title = $(el).find('.title').text().trim();
      const link = $(el).find('a').attr('href');
      const thumbnail = $(el).find('img').attr('src');
      if (title && link) movies.push({ title, link, thumbnail });
    });

    if (movies.length === 0) return m.reply("‡∂ö‡∑í‡∑É‡∑í‡∂≥‡∑î ‡∑É‡∑í‡∂±‡∂∏‡∑è‡∂ö‡∑ä ‡∑É‡∑ú‡∂∫‡∑è‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫!");

    // --- Step 2: Show movie list to user ---
    let listMsg = `üé¨ ‡∂î‡∂∂ ‡∑É‡∑ô‡∑Ä‡∑ñ "${text}" ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂ú‡∑ê‡∑Ö‡∂¥‡∑ô‡∂± ‡∑É‡∑í‡∂±‡∂∏‡∑è:\n\n`;
    for (let i = 0; i < movies.length; i++) {
      listMsg += `${i + 1}. ${movies[i].title}\n`;
    }
    listMsg += `\n‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∑É‡∑í‡∂±‡∂∏‡∑è ‡∂Ö‡∂Ç‡∂ö‡∂∫ ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂± (1-${movies.length}):`;

    await m.sendMessage(m.chat, { image: { url: movies[0].thumbnail }, caption: listMsg }, { quoted: m });

    const response = await m.bot.waitForMessage(m.chat, m.sender, 30);
    const selection = parseInt(response?.text?.trim());

    if (!selection || selection < 1 || selection > movies.length) {
      return m.reply("‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂Ö‡∂Ç‡∂ö‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±!");
    }

    const selectedMovie = movies[selection - 1];

    // --- Step 3: Scrape download links ---
    const moviePage = await axios.get(selectedMovie.link, { headers });
    const $$ = cheerio.load(moviePage.data);

    const scripts = $$("script").map((i, el) => $$(el).html()).get();
    const jsonScript = scripts.find(s => s.includes("fileSize"));
    if (!jsonScript) return m.reply("‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∑É‡∂∂‡∑ê‡∂≥‡∑í ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫.");

    const jsonMatch = jsonScript.match(/ÓÄÅ.*ÓÄÅ/);
    if (!jsonMatch) return m.reply("JSON ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫.");

    let jsonResponses = [];
    try {
      jsonResponses = JSON.parse(jsonMatch[0]);
    } catch (e) {
      return m.reply("‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ä ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂∫‡∑Ä‡∑í‡∂∫ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö.");
    }

    const linksMsg = jsonResponses.map((res, i) => {
      return `üì• *${i + 1}. ${res.label}*\nFile Size: ${res.fileSize}`;
    }).join("\n");

    await m.reply(`üìÄ ‡∑É‡∑ô‡∂ª‡∑ì‡∑É‡∑ä / ‡∂†‡∑í‡∂≠‡∑ä‚Äç‡∂ª‡∂¥‡∂ß‡∂∫ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂Ω‡∂∂‡∑è‡∂ú‡∂≠ ‡∑Ñ‡∑ê‡∂ö‡∑í ‡∂ú‡∑î‡∂´‡∑è‡∂≠‡∑ä‡∂∏‡∂≠‡∑è‡∑Ä‡∂∫‡∂±‡∑ä:\n\n${linksMsg}\n\n‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂Ö‡∂Ç‡∂ö‡∂∫ ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂±:`);

    const res2 = await m.bot.waitForMessage(m.chat, m.sender, 30);
    const selectedIndex = parseInt(res2?.text?.trim());

    if (!selectedIndex || selectedIndex < 1 || selectedIndex > jsonResponses.length) {
      return m.reply("‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂Ö‡∂Ç‡∂ö‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±!");
    }

    const selectedDownload = jsonResponses[selectedIndex - 1];

    // --- Step 4: Check file size before sending link ---
    const sizeText = selectedDownload.fileSize || "0 MB";
    const sizeMatch = sizeText.match(/([\d.]+)\s*(GB|MB)/i);
    let fileSizeMB = 0;

    if (sizeMatch) {
      fileSizeMB = parseFloat(sizeMatch[1]) * (sizeMatch[2].toUpperCase() === "GB" ? 1024 : 1);
    }

    if (fileSizeMB > 3072) {
      return m.reply(`‚õî ‡∂∏‡∑ô‡∂∏ ‡∂ú‡∑î‡∂´‡∑è‡∂≠‡∑ä‡∂∏‡∂≠‡∑è‡∑Ä‡∂∫ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä‡∑ö ‡∑Ä‡∑í‡∑Å‡∑è‡∂Ω‡∂≠‡∑ä‡∑Ä‡∂∫ (${selectedDownload.fileSize}) ‡∑Ä‡∂©‡∑è ‡∑Ä‡∑ê‡∂©‡∑í‡∂∫. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂Ö‡∂±‡∑ô‡∂ö‡∑ä ‡∂ú‡∑î‡∂´‡∑è‡∂≠‡∑ä‡∂∏‡∂≠‡∑è‡∑Ä‡∂∫‡∂ö‡∑ä ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±.`);
    }

    // --- Step 5: Generate final link ---
    const finalLink = await generateModifiedLink(selectedDownload.src, headers);
    if (!finalLink) return m.reply("‡∂∂‡∑è‡∂ú‡∂≠ ‡∑É‡∂∂‡∑ê‡∂≥‡∑í‡∂∫ ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏ ‡∂Ö‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö ‡∑Ä‡∑í‡∂∫.");

    // --- Step 6: Send final download link ---
    await m.sendMessage(m.chat, {
      image: { url: selectedMovie.thumbnail },
      caption:
        `üé¨ *${selectedMovie.title}*\n\n` +
        `üì• ‡∂ú‡∑î‡∂´‡∑è‡∂≠‡∑ä‡∂∏‡∂≠‡∑è‡∑Ä: ${selectedDownload.label}\n` +
        `üíæ File Size: ${selectedDownload.fileSize}\n\n` +
        `‚û°Ô∏è ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏: ${finalLink}`
    }, { quoted: m });
  }
};

async function generateModifiedLink(url, headers) {
  try {
    const res = await axios.get(url, { headers, maxRedirects: 5 });
    const $ = cheerio.load(res.data);
    const iframe = $("iframe").attr("src");
    if (!iframe) return null;

    const hostRes = await axios.get(iframe, { headers, maxRedirects: 5 });
    const host$ = cheerio.load(hostRes.data);
    const script = host$("script").map((i, el) => host$(el).html()).get().find(s => s.includes("sources"));

    const match = script?.match(/sources:\s*ÓÄÅ\s*\{.*?file:\s*["'](.+?)["']/);
    return match ? match[1] : null;
  } catch (err) {
    return null;
  }
}
