const { cmd } = require('../command');
const axios = require('axios');
const cheerio = require('cheerio');
const fs = require('fs');
const path = require('path');
const disk = require('diskusage');

cmd({
    pattern: "xnxxsearch",
    desc: "XNXX ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∑É‡∑ô‡∑Ä‡∑ì‡∂∏ (Scraping)",
    category: "‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏",
    filename: __filename,
    react: "üîç"
},
async (sock, mek, m, { args, q, reply }) => {
    try {
        if (!q) {
            return reply("‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∑É‡∑ô‡∑Ä‡∑î‡∂∏‡∑ä ‡∂¥‡∂Ø‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è‡∂Ø‡∑ô‡∂±‡∑ä‡∂±! ‡∂ã‡∂Ø‡∑è: .xnxxsearch kalifa");
        }

        const searchUrl = `https://www.xvideos.com/?k=${encodeURIComponent(q)}`;
        console.log("Fetching search URL:", searchUrl);
        const response = await axios.get(searchUrl, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
                'Accept-Language': 'en-US,en;q=0.5',
                'Referer': 'https://www.xvideos.com/'
            },
            timeout: 15000
        });

        console.log("Search page fetched. HTML length:", response.data.length);
        const $ = cheerio.load(response.data);
        const results = [];

        $('div.mozaique .thumb-block').each((i, element) => {
            const title = $(element).find('.title a').text().trim();
            const url = 'https://www.xvideos.com' + $(element).find('.title a').attr('href');
            if (title && url) {
                results.push({ title, url });
            }
        });

        console.log("Search results found:", results.length);
        if (results.length === 0) {
            return reply("‡∂ö‡∑í‡∑É‡∑í‡∂Ø‡∑î ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω‡∂∫‡∂ö‡∑ä ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫.");
        }

        let message = "üîç *XNXX Search Results* üîç\n\n";
        results.slice(0, 5).forEach((item, index) => {
            message += `${index + 1}. *${item.title}*\nüîó ${item.url}\n\n`;
        });
        message += "‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß: .xnxxdl <url>";

        await reply(message);

    } catch (error) {
        console.error("XNXX Search (Scraping) error:", error.message);
        let errorMsg = error.message;
        if (error.response) {
            errorMsg += ` (HTTP ${error.response.status})`;
        }
        await reply(`‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í‡∑Ä‡∑í‡∂∫: ${errorMsg}.`);
    }
});

cmd({
    pattern: "xnxxdl",
    desc: "XNXX ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ (Scraping)",
    category: "‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏",
    filename: __filename,
    react: "üìΩÔ∏è"
},
async (sock, mek, m, { args, q, reply }) => {
    try {
        if (!q) {
            return reply("‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î XNXX URL ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è‡∂Ø‡∑ô‡∂±‡∑ä‡∂±! ‡∂ã‡∂Ø‡∑è: .xnxxdl <url>");
        }

        if (!q.startsWith("https://www.xvideos.com/")) {
            return reply("‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂±‡∑ú‡∑Ä‡∂± XNXX URL ‡∂ë‡∂ö‡∂ö‡∑ä! ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î XNXX ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù URL ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è‡∂Ø‡∑ô‡∂±‡∑ä‡∂±.");
        }

        // Validate m.from
        if (!m?.from) {
            console.error("m.from is undefined. Cannot send message.");
            return reply("Bot ‡∂ë‡∂ö‡∑ö connection ‡∂ë‡∂ö‡∑ö ‡∂ú‡∑ê‡∂ß‡∂Ω‡∑î‡∑Ä‡∂ö‡∑ä ‡∂á‡∂≠. Bot ‡∂ë‡∂ö restart ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
        }
        console.log("Chat ID (m.from):", m.from);

        // Check bot connection
        const connectionState = sock?.ws?.readyState;
        console.log("WebSocket connection state:", connectionState);
        if (connectionState !== 1) { // 1 = OPEN
            console.error("Bot is not connected to WhatsApp.");
            return reply("Bot ‡∂ë‡∂ö WhatsApp ‡∂ë‡∂ö‡∂ß connect ‡∑Ä‡∑ì ‡∂±‡∑ê‡∂≠. Bot ‡∂ë‡∂ö restart ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
        }

        // Check disk space
        const downloadsDir = './downloads';
        console.log("Checking disk space...");
        const diskInfo = await disk.check(downloadsDir);
        const freeSpaceMB = diskInfo.free / (1024 * 1024); // Convert to MB
        console.log("Free disk space:", freeSpaceMB.toFixed(2), "MB");
        if (freeSpaceMB < 100) {
            return reply(`‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: Server ‡∂ë‡∂ö‡∑ö ‡∂â‡∂© ‡∂¥‡∑ä‚Äç‡∂ª‡∂∏‡∑è‡∂´‡∑Ä‡∂≠‡∑ä ‡∂±‡∑ê‡∂≠! (Free: ${freeSpaceMB.toFixed(2)} MB). Space free ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.`);
        }

        // Create downloads directory
        if (!fs.existsSync(downloadsDir)) {
            fs.mkdirSync(downloadsDir, { recursive: true });
        }

        // Scrape video page
        console.log("Fetching video URL:", q);
        const response = await axios.get(q, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
                'Accept-Language': 'en-US,en;q=0.5',
                'Referer': 'https://www.xvideos.com/'
            },
            timeout: 15000
        });

        console.log("Video page fetched. HTML length:", response.data.length);
        const $ = cheerio.load(response.data);

        // Find video URL
        let videoUrl = '';
        const scripts = $('script').filter((i, el) => $(el).text().includes('setVideoUrlHigh'));
        for (let script of scripts) {
            const scriptText = $(script).text();
            const match = scriptText.match(/setVideoUrlHigh\('([^']+)'\)/);
            if (match) {
                videoUrl = match[1];
                break;
            }
        }

        console.log("Extracted video URL:", videoUrl);
        if (!videoUrl) {
            return reply("‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù URL ‡∂ë‡∂ö ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫. URL ‡∂ë‡∂ö valid ‡∂∂‡∑Ä ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
        }

        // Get video title
        const title = $('meta[property="og:title"]').attr('content') || 
                      $('title').text().split(' - ')[0] || 
                      "XNXX ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù";
        console.log("Video Title:", title);

        // Download video
        const outputPath = path.join(downloadsDir, `${Date.now()}.mp4`);
        console.log("Downloading video to:", outputPath);
        await reply("‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂∏‡∑í‡∂±‡∑ä...");

        const videoResponse = await axios({
            url: videoUrl,
            method: 'GET',
            responseType: 'stream',
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36',
                'Referer': 'https://www.xvideos.com/'
            }
        });

        const writer = fs.createWriteStream(outputPath);
        videoResponse.data.pipe(writer);

        await new Promise((resolve, reject) => {
            writer.on('finish', () => {
                console.log("Video downloaded successfully to:", outputPath);
                resolve();
            });
            writer.on('error', (err) => {
                console.error("Download error:", err.message);
                reject(err);
            });
        });

        // Check if file exists
        if (!fs.existsSync(outputPath)) {
            return reply("‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∂Ö‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∂∫‡∑í. URL ‡∂ë‡∂ö valid ‡∂∂‡∑Ä ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
        }

        // Send video as local file
        console.log("Sending video via WhatsApp...");
        await sock.sendMessage(m.from, {
            video: fs.readFileSync(outputPath),
            caption: `üé• *${title}*\nMANJU_MD Bot ‡∑Ñ‡∂ª‡∑Ñ‡∑è ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì`,
        }, { quoted: mek });

        // Clean up
        console.log("Cleaning up downloaded file...");
        fs.unlinkSync(outputPath);

    } catch (error) {
        console.error("XNXX Download (Scraping) error:", error.message, error.stack);
        let errorMsg = error.message;
        if (error.response) {
            errorMsg += ` (HTTP ${error.response.status})`;
        }
        if (error.code === 'ENOSPC') {
            errorMsg = "Server ‡∂ë‡∂ö‡∑ö ‡∂â‡∂© ‡∂¥‡∑ä‚Äç‡∂ª‡∂∏‡∑è‡∂´‡∑Ä‡∂≠‡∑ä ‡∂±‡∑ê‡∂≠! Space free ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.";
        }
        await reply(`‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í‡∑Ä‡∑í‡∂∫: ${errorMsg}. URL ‡∂ë‡∂ö valid ‡∂∂‡∑Ä ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.`);
    }
});
