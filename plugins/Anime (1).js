const { cmd } = require("../command");

const axios = require('axios');

const NodeCache = require('node-cache');

// Cache ‡∂ë‡∂ö ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ (‡∑Ä‡∑í‡∂±‡∑è‡∂©‡∑í 1 TTL)

const animeCache = new NodeCache({ stdTTL: 60, checkperiod: 120 });

// ======================

// FROZEN QUEEN ‡∂≠‡∑ö‡∂∏‡∑è‡∑Ä

// ======================

const frozenTheme = {

  header: `‚ï≠‚ïê‚ïê‚ïê‚ùñ‚Ä¢¬∞‚ùÑÔ∏è¬∞‚Ä¢‚ùñ‚ïê‚ïê‚ïê‚ïÆ\n   ‡º∫ FROZEN-QUEEN-MD ‡ºª\n   ‚ùÖ ‡∂ª‡∑è‡∂¢‡∂ö‡∑ì‡∂∫ ‡∂Ö‡∂∫‡∑í‡∑É‡∑ä ‡∂ª‡∑è‡∂¢‡∂∞‡∑è‡∂±‡∑í‡∂∫ ‚ùÖ\n‚ï∞‚ïê‚ïê‚ïê‚ùñ‚Ä¢¬∞‚ùÑÔ∏è¬∞‚Ä¢‚ùñ‚ïê‚ïê‚ïê‚ïØ\n`,

  box: function(title, content) {

    return `${this.header}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ùñ ‚ùÑÔ∏è ‚ùñ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n   ‚úß ${title} ‚úß\n‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ùñ ‚ùÑÔ∏è ‚ùñ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n${content}\n\n‚ùÑ‚ïê‚ïê‚ïê‚ïê‚ïê‚ùñ ‚ùÑÔ∏è ‚ùñ‚ïê‚ïê‚ïê‚ïê‚ïê‚ùÑ\n‚úß ‡∑É‡∑ì‡∂≠‡∂Ω ‡∂∏‡∂ß ‡∂ö‡∑í‡∑É‡∑í ‡∑Ä‡∑í‡∂ß‡∑ô‡∂ö ‡∂∂‡∑è‡∂∞‡∑è‡∑Ä‡∂ö‡∑ä ‡∂±‡∑ú‡∑Ä‡∑ö ‚úß`;

  },

  getForwardProps: function() {

    return {

      contextInfo: {

        forwardingScore: 999,

        isForwarded: true,

        stanzaId: "BAE5" + Math.random().toString(16).substr(2, 12).toUpperCase(),

        mentionedJid: [],

        conversionData: {

          conversionDelaySeconds: 0,

          conversionSource: "frozen_queen",

          conversionType: "message"

        }

      }

    };

  },

  resultEmojis: ["‚ùÑÔ∏è", "üßä", "üëë", "üé•", "üé¨", "üìΩÔ∏è", "üéûÔ∏è", "‚ùÖ", "‚úß", "üå¨Ô∏è"]

};

// Anime ‡∑É‡∑ô‡∑Ä‡∑î‡∂∏‡∑ä ‡∑É‡∑Ñ ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö command ‡∂ë‡∂ö

cmd({

  pattern: "anime",

  react: "‚ùÑÔ∏è",

  desc: "Frozen Queen ‡∂ú‡∑ö ‡∂Ö‡∂∫‡∑í‡∑É‡∑ä ‡∂ª‡∑è‡∂¢‡∂∞‡∑è‡∂±‡∑í‡∂∫‡∑ö anime ‡∂∑‡∑è‡∂´‡∑ä‡∂© ‡∂ú‡∑Ä‡∑ö‡∑Ç‡∂´‡∂∫ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±",

  category: "ice kingdom",

  filename: __filename

}, async (conn, mek, m, { from, q, reply }) => {

  console.log("Anime command triggered with query:", q);

  if (!q) {

    console.log("No query provided, sending usage message");

    return reply(frozenTheme.box("‡∂ª‡∑è‡∂¢‡∂ö‡∑ì‡∂∫ ‡∂±‡∑í‡∂∫‡∑ù‡∂ú‡∂∫", 

      "‚ùÖ ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∂∫: .anime <anime ‡∂±‡∂∏>\n‚ùÖ ‡∂ã‡∂Ø‡∑è: .anime Perfect World\n‚ùÖ ‡∂∑‡∑è‡∂´‡∑ä‡∂©: ‡∂Ö‡∂∫‡∑í‡∑É‡∑ä ‡∂ª‡∑è‡∂¢‡∂∞‡∑è‡∂±‡∑í‡∂∫‡∑ö anime ‡∂∑‡∑è‡∂´‡∑ä‡∂©"));

  }

  try {

    // ‡∂¥‡∑í‡∂∫‡∑Ä‡∂ª 1: Cache ‡∂ë‡∂ö‡∑ö anime ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î ‡∂≠‡∑í‡∂∂‡∑ö‡∂Ø‡∑ê‡∂∫‡∑í ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏

    const cacheKey = `anime_search_${q.toLowerCase()}`;

    let searchData = animeCache.get(cacheKey);

    if (!searchData) {

      const searchUrl = `https://vajira-api-seven.vercel.app/movie/animexinSearch?text=${encodeURIComponent(q)}`;

      console.log("Fetching data from API:", searchUrl);

      let retries = 3;

      while (retries > 0) {

        try {

          const searchResponse = await axios.get(searchUrl, { timeout: 5000 });

          console.log("API Response:", searchResponse.data);

          searchData = searchResponse.data;

          break;

        } catch (error) {

          retries--;

          console.error(`API retry ${3 - retries} failed:`, error.message);

          if (retries === 0) throw new Error("‡∂Ö‡∂∫‡∑í‡∑É‡∑ä ‡∂∑‡∑è‡∂´‡∑ä‡∂©‡∑è‡∂ú‡∑è‡∂ª‡∂∫‡∑ô‡∂±‡∑ä anime ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏ ‡∂Ö‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∂∫‡∑í");

          await new Promise(resolve => setTimeout(resolve, 1000));

        }

      }

      // API response ‡∂ë‡∂ö object ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∂Ω‡∑ê‡∂∂‡∑ô‡∂±‡∑Ä‡∑è, 'result' key ‡∂ë‡∂ö ‡∂≠‡∑í‡∂∂‡∑ö‡∂Ø‡∑ê‡∂∫‡∑í check ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏

      if (!searchData || typeof searchData !== "object" || !searchData.result) {

        console.log("API response does not contain 'result' key:", searchData);

        throw new Error("API response ‡∂ë‡∂ö‡∑ö 'result' key ‡∂ë‡∂ö ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠");

      }

      // 'result' key ‡∂ë‡∂ö array ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∂Ω‡∑ê‡∂∂‡∑ô‡∂±‡∑Ä‡∑è‡∂Ø‡∑ê‡∂∫‡∑í check ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏

      if (!Array.isArray(searchData.result)) {

        console.log("API response 'result' is not an array:", searchData.result);

        throw new Error("API response ‡∂ë‡∂ö‡∑ö 'result' array ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∑ú‡∑Ä‡∑ö");

      }

      if (searchData.result.length === 0) {

        console.log("API response 'result' is an empty array:", searchData.result);

        throw new Error("‡∂Ö‡∂∫‡∑í‡∑É‡∑ä ‡∂ª‡∑è‡∂¢‡∂∞‡∑è‡∂±‡∑í‡∂∫‡∑ö anime ‡∂ö‡∑í‡∑É‡∑í‡∑Ä‡∂ö‡∑ä ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫");

      }

      // searchData.result ‡∂Ω‡∑ô‡∑É cache ‡∂ö‡∂ª‡∂∏‡∑î

      animeCache.set(cacheKey, searchData.result);

      console.log("Cached search data:", cacheKey);

      searchData = searchData.result; // searchData update ‡∂ö‡∂ª‡∂∏‡∑î

    }

    // ‡∂¥‡∑í‡∂∫‡∑Ä‡∂ª 2: Anime ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä format ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏

    let animeList = `‚ùÑÔ∏è *FROZEN ANIME VAULT* ‚ùÑÔ∏è\n\n`;

    const animes = searchData.map((anime, index) => ({

      number: index + 1,

      title: anime.title || "Unknown Title",

      url: anime.url || "",

      image: anime.image || "https://i.ibb.co/5Yb4VZy/snowflake.jpg",

      status: anime.status || "Unknown",

      subtitle: anime.subtitle || "N/A",

      type: anime.type || "N/A"

    }));

    console.log("Formatted anime list:", animes);

    if (animes.length === 0) {

      throw new Error("Anime ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä ‡∑Ñ‡∑í‡∑É‡∑ä‡∂∫");

    }

    animes.forEach(anime => {

      animeList += `${frozenTheme.resultEmojis[0]} ${anime.number}. *${anime.title}*\n`;

      animeList += `   ${frozenTheme.resultEmojis[1]} Link: ${anime.url}\n`;

      animeList += `   ${frozenTheme.resultEmojis[2]} Status: ${anime.status}\n`;

      animeList += `   ${frozenTheme.resultEmojis[3]} Subtitle: ${anime.subtitle}\n`;

      animeList += `   ${frozenTheme.resultEmojis[4]} Type: ${anime.type}\n\n`;

    });

    animeList += `${frozenTheme.resultEmojis[8]} Anime ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±: ‡∂Ö‡∂Ç‡∂ö‡∂∫ ‡∂ª‡∑í‡∂¥‡∑ä‡∂Ω‡∂∫‡∑í ‡∂ö‡∂ª‡∂±‡∑ä‡∂±\n`;

    animeList += `${frozenTheme.resultEmojis[9]} FROZEN-QUEEN BY MR.Chathura`;

    const sentMessage = await conn.sendMessage(from, {

      image: { url: animes[0].image },

      caption: frozenTheme.box("Anime ‡∂ú‡∑Ä‡∑ö‡∑Ç‡∂´‡∂∫", animeList),

      ...frozenTheme.getForwardProps()

    }, { quoted: mek });

    console.log("Sent anime list message with ID:", sentMessage.key.id);

    // ‡∂¥‡∑í‡∂∫‡∑Ä‡∂ª 3: Anime ‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏ ‡∂∂‡∂Ω‡∑è ‡∑É‡∑í‡∂ß‡∑ì‡∂∏

    const animeSelectionHandler = async (update) => {

      const message = update.messages[0];

      if (!message.message || !message.message.extendedTextMessage) return;

      const userReply = message.message.extendedTextMessage.text.trim();

      if (message.message.extendedTextMessage.contextInfo.stanzaId !== sentMessage.key.id) return;

      console.log("User replied with:", userReply);

      const selectedNumber = parseInt(userReply);

      const selectedAnime = animes.find(anime => anime.number === selectedNumber);

      if (!selectedAnime) {

        console.log("Invalid selection:", userReply);

        await conn.sendMessage(from, {

          text: frozenTheme.box("FROZEN ‡∂Ö‡∑Ä‡∑Ä‡∑è‡∂Ø‡∂∫", 

            "‚ùÖ ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂±‡∑ú‡∑Ä‡∂± ‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏‡∂ö‡∑í!\n‚ùÖ Anime ‡∂Ö‡∂Ç‡∂ö‡∂∫‡∂ö‡∑ä ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±\n‚ùÖ Snowgies ‡∂∏‡∑Ä‡∑í‡∂≠ ‡∑Ä‡∑ì ‡∂á‡∂≠"),

          ...frozenTheme.getForwardProps()

        }, { quoted: message });

        return;

      }

      // Anime ‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏‡∑ö listener ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏

      conn.ev.off("messages.upsert", animeSelectionHandler);

      console.log("Removed anime selection handler");

      // ‡∂¥‡∑í‡∂∫‡∑Ä‡∂ª 4: Anime ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏

      const detailUrl = `https://vajira-api-seven.vercel.app/movie/animexinDetail?url=${encodeURIComponent(selectedAnime.url)}`;

      console.log("Fetching anime details from:", detailUrl);

      let detailData;

      let detailRetries = 3;

      while (detailRetries > 0) {

        try {

          const detailResponse = await axios.get(detailUrl, { timeout: 5000 });

          console.log("Anime Details Response:", detailResponse.data);

          detailData = detailResponse.data;

          break;

        } catch (error) {

          detailRetries--;

          console.error(`Detail API retry ${3 - detailRetries} failed:`, error.message);

          if (detailRetries === 0) throw new Error("Anime ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏ ‡∂Ö‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∂∫‡∑í");

          await new Promise(resolve => setTimeout(resolve, 1000));

        }

      }

      if (!detailData || !detailData.status || !detailData.data) {

        console.log("No valid detail data:", detailData);

        throw new Error("‡∂Ö‡∂∫‡∑í‡∑É‡∑ä ‡∂∑‡∑è‡∂´‡∑ä‡∂©‡∑è‡∂ú‡∑è‡∂ª‡∂∫‡∑ö anime ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∂±‡∑ê‡∂≠");

      }

      // Anime ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∂Ω‡∑í‡∂±‡∑ä‡∂ö‡∑ä format ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏

      let downloadOptions = `${frozenTheme.resultEmojis[3]} *${selectedAnime.title}*\n\n`;

      downloadOptions += `${frozenTheme.resultEmojis[4]} *‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∑Ä‡∑í‡∂ö‡∂Ω‡∑ä‡∂¥*:\n\n`;

      const downloadLinks = (detailData.data.download_links || []).map((link, index) => ({

        number: index + 1,

        quality: link.quality || "Unknown Quality",

        url: link.url || ""

      }));

      if (downloadLinks.length === 0) {

        console.log("No download links found");

        throw new Error("‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∂Ω‡∑í‡∂±‡∑ä‡∂ö‡∑ä ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠");

      }

      downloadLinks.forEach(link => {

        downloadOptions += `${frozenTheme.resultEmojis[0]} ${link.number}. *${link.quality}*\n`;

      });

      downloadOptions += `\n${frozenTheme.resultEmojis[8]} ‡∂ú‡∑î‡∂´‡∑è‡∂≠‡∑ä‡∂∏‡∂ö‡∂∑‡∑è‡∑Ä‡∂∫ ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±: ‡∂Ö‡∂Ç‡∂ö‡∂∫ ‡∂ª‡∑í‡∂¥‡∑ä‡∂Ω‡∂∫‡∑í ‡∂ö‡∂ª‡∂±‡∑ä‡∂±\n`;

      downloadOptions += `${frozenTheme.resultEmojis[9]} FROZEN-QUEEN BY MR.Chathura`;

      const downloadMessage = await conn.sendMessage(from, {

        image: { url: detailData.data.thumbnail || selectedAnime.image },

        caption: frozenTheme.box("‡∂ª‡∑è‡∂¢‡∂ö‡∑ì‡∂∫ ‡∂∑‡∑è‡∂´‡∑ä‡∂©‡∑è‡∂ú‡∑è‡∂ª‡∂∫", downloadOptions),

        ...frozenTheme.getForwardProps()

      }, { quoted: message });

      console.log("Sent download options message with ID:", downloadMessage.key.id);

      // ‡∂¥‡∑í‡∂∫‡∑Ä‡∂ª 5: ‡∂ú‡∑î‡∂´‡∑è‡∂≠‡∑ä‡∂∏‡∂ö‡∂∑‡∑è‡∑Ä‡∂∫ ‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏ ‡∂∂‡∂Ω‡∑è ‡∑É‡∑í‡∂ß‡∑ì‡∂∏

      const qualitySelectionHandler = async (updateQuality) => {

        const qualityMessage = updateQuality.messages[0];

        if (!qualityMessage.message || !qualityMessage.message.extendedTextMessage) return;

        const qualityReply = qualityMessage.message.extendedTextMessage.text.trim();

        if (qualityMessage.message.extendedTextMessage.contextInfo.stanzaId !== downloadMessage.key.id) return;

        console.log("User selected quality:", qualityReply);

        const selectedQualityNumber = parseInt(qualityReply);

        const selectedLink = downloadLinks.find(link => link.number === selectedQualityNumber);

        if (!selectedLink) {

          console.log("Invalid quality selection:", qualityReply);

          await conn.sendMessage(from, {

            text: frozenTheme.box("FROZEN ‡∂Ö‡∑Ä‡∑Ä‡∑è‡∂Ø‡∂∫", 

              "‚ùÖ ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂±‡∑ú‡∑Ä‡∂± ‡∂ú‡∑î‡∂´‡∑è‡∂≠‡∑ä‡∂∏‡∂ö‡∂∑‡∑è‡∑Ä‡∂∫‡∂ö‡∑í!\n‚ùÖ ‡∂ú‡∑î‡∂´‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂Ö‡∂Ç‡∂ö‡∂∫‡∂ö‡∑ä ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±\n‚ùÖ Snowgies ‡∂∏‡∑Ä‡∑í‡∂≠ ‡∑Ä‡∑ì ‡∂á‡∂≠"),

            ...frozenTheme.getForwardProps()

          }, { quoted: qualityMessage });

          return;

        }

        // ‡∂ú‡∑î‡∂´‡∑è‡∂≠‡∑ä‡∂∏‡∂ö‡∂∑‡∑è‡∑Ä‡∂∫ ‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏‡∑ö listener ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏

        conn.ev.off("messages.upsert", qualitySelectionHandler);

        console.log("Removed quality selection handler");

        // ‡∂¥‡∑í‡∂∫‡∑Ä‡∂ª 6: Anime ‡∂Ω‡∑ö‡∂õ‡∂±‡∂∫‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∂ë‡∑Ä‡∑ì‡∂∏

        try {

          console.log("Sending anime file:", selectedLink.url);

          await conn.sendMessage(from, {

            document: { url: selectedLink.url },

            mimetype: "video/mp4",

            fileName: `${selectedAnime.title} - ${selectedLink.quality}.mp4`,

            caption: frozenTheme.box("Anime ‡∂∑‡∑è‡∂´‡∑ä‡∂©‡∂∫", 

              `${frozenTheme.resultEmojis[3]} *${selectedAnime.title}*\n${frozenTheme.resultEmojis[4]} ‡∂ú‡∑î‡∂´‡∑è‡∂≠‡∑ä‡∂∏‡∂ö‡∂∑‡∑è‡∑Ä‡∂∫: ${selectedLink.quality}\n\n${frozenTheme.resultEmojis[8]} ‡∂î‡∂∂‡∑ö ‡∂∑‡∑è‡∂´‡∑ä‡∂©‡∂∫ ‡∂Ö‡∂∫‡∑í‡∑É‡∑ä ‡∂ª‡∑è‡∂¢‡∂∞‡∑è‡∂±‡∑í‡∂∫‡∑ö ‡∂∂‡∑ê‡∂∂‡∂Ω‡∑ö!\n${frozenTheme.resultEmojis[9]} FROZEN-QUEEN BY MR.Chathura`),

            ...frozenTheme.getForwardProps()

          }, { quoted: qualityMessage });

          await conn.sendMessage(from, { react: { text: frozenTheme.resultEmojis[0], key: qualityMessage.key } });

          console.log("Anime file sent successfully");

        } catch (downloadError) {

          console.error("Download error:", downloadError.message);

          await conn.sendMessage(from, {

            text: frozenTheme.box("ICE ‡∂Ö‡∑Ä‡∑Ä‡∑è‡∂Ø‡∂∫", 

              `‚ùÖ ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑í: ${downloadError.message}\n‚ùÖ ‡∑É‡∑ò‡∂¢‡∑î‡∑Ä ‡∂∂‡∑è‡∂ú‡∂±‡∑ä‡∂±: ${selectedLink.url}\n‚ùÖ ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±`),

            ...frozenTheme.getForwardProps()

          }, { quoted: qualityMessage });

        }

      };

      // ‡∂ú‡∑î‡∂´‡∑è‡∂≠‡∑ä‡∂∏‡∂ö‡∂∑‡∑è‡∑Ä‡∂∫ ‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏‡∑ö listener ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏

      conn.ev.on("messages.upsert", qualitySelectionHandler);

      console.log("Registered quality selection handler");

    };

    // Anime ‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏‡∑ö listener ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏

    conn.ev.on("messages.upsert", animeSelectionHandler);

    console.log("Registered anime selection handler");

  } catch (e) {

    console.error("Error in anime command:", e.message, e.stack);

    const errorMsg = frozenTheme.box("ICE ‡∂ö‡∑î‡∂´‡∑è‡∂ß‡∑î‡∑Ä", 

      `‚ùÖ ‡∂Ø‡∑ù‡∑Ç‡∂∫: ${e.message || "Ice Harpies ‡∂∑‡∑è‡∂´‡∑ä‡∂©‡∑è‡∂ú‡∑è‡∂ª‡∂∫ ‡∑Ä‡∑í‡∂±‡∑è‡∑Å ‡∂ö‡∑Ö‡∑è"}\n‚ùÖ ‡∂ª‡∑è‡∂¢‡∂ö‡∑ì‡∂∫ ‡∂∑‡∑è‡∂´‡∑ä‡∂©‡∑è‡∂ú‡∑è‡∂ª‡∂∫ ‡∑Ä‡∑É‡∑è ‡∂á‡∂≠\n‚ùÖ ‡∂ö‡∑î‡∂´‡∑è‡∂ß‡∑î‡∑Ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∑Ä‡∑ñ ‡∂¥‡∑É‡∑î ‡∂∫‡∑Ö‡∑í ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±`);

    

    await reply(errorMsg);

    await conn.sendMessage(from, { react: { text: "‚ùå", key: mek.key } });

  }

});