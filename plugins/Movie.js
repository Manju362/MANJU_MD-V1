const { cmd } = require("../command");
const axios = require('axios');
const NodeCache = require('node-cache');

// Cache ‡∂ë‡∂ö initialize ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ (1 ‡∑Ä‡∑í‡∂±‡∑è‡∂©‡∑í‡∂∫‡∂ö TTL)
const searchCache = new NodeCache({ stdTTL: 60, checkperiod: 120 });

// ======================
// FROZEN QUEEN ‡∂≠‡∑ö‡∂∏‡∑è‡∑Ä
// ======================
const frozenTheme = {
  header: `‚ï≠‚ïê‚ïê‚ïê‚ùñ‚Ä¢¬∞‚ú¥Ô∏è¬∞‚Ä¢‚ùñ‚ïê‚ïê‚ïê‚ïÆ\n   ùó†ùóîùó°ùóùùó®_ùó†ùóó ùó†ùó¢ùó©ùóúùóò ùó¶ùóúùóßùóòüé•\n   ‚ùÖ ùóßùóõùóò ùó•ùó¢ùó¨ùóîùóü ùóóùóîùó•ùóû ùóûùóúùó°ùóóùó¢ùó† ‚ùÖ\n‚ï∞‚ïê‚ïê‚ïê‚ùñ‚Ä¢¬∞„ÄΩ‚ú¥Ô∏è¬∞‚Ä¢‚ùñ‚ïê‚ïê‚ïê‚ïØ\n`,
  box: function(title, content) {
    return `${this.header}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ùñ ‚ú¥Ô∏è ‚ùñ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n   ‚úß ${title} ‚úß\n‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ùñ ‚ú¥Ô∏è ‚ùñ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n${content}\n\n‚ú¥Ô∏è‚ïê‚ïê‚ïê‚ïê‚ïê‚ùñ ‚ú¥Ô∏è ‚ùñ‚ïê‚ïê‚ïê‚ïê‚ïê‚ú¥Ô∏è\n‚úß ùóú,ùóîùó†  ùóóùóòùó†ùó¢ùó° ùóßùó¢ ùóßùóõùóúùó¶ ùó™ùóõùó¢ùóüùóò ùó™ùó¢ùó•ùóüùóó. ‚úß`;
  },
  getForwardProps: function() {
    return {
      contextInfo: {
        forwardingScore: 999,
        isForwarded: true,
        stanzaId: "BAE5" + Math.random().toString(16).substr(2, 12).toUpperCase(),
        mentionedJid: [],
        conversionData: {
          conversionDelaySeconds: 0,
          conversionSource: "frozen_queen",
          conversionType: "message"
        }
      }
    };
  },
  resultEmojis: ["üìΩÔ∏è", "üßä", "üëë", "üé•", "üé¨", "üìΩÔ∏è", "üéûÔ∏è", "‚ùÖ", "‚úß", "‚ú≥Ô∏è"]
};

// Film ‡∑É‡∑ô‡∑Ä‡∑î‡∂∏‡∑ä ‡∑É‡∑Ñ ‡∂©‡∑Ä‡∑î‡∂±‡∑ä‡∂Ω‡∑ù‡∂©‡∑ä command ‡∂ë‡∂ö
cmd({
  pattern: "film",
  react: "üé¨",
  desc: "G·¥á·¥õ M·¥è·¥†…™·¥ás “ì Ä·¥è·¥ç M·¥Ä…¥·¥ä·¥ú_M·¥Ö's ·¥õ Ä·¥á·¥Äs·¥ú Ä è ·¥õ·¥è ·¥á…¥·¥ä·¥è è ·¥Ñ…™…¥·¥á·¥ç·¥Ä",
  category: "D·¥Ä Ä·¥ã K…™…¥·¥Ö·¥è·¥ç",
  filename: __filename,
}, async (conn, mek, m, { from, q, pushname, reply }) => {
  if (!q) {
    return reply(frozenTheme.box("S…™…¥ ú·¥Ä ü·¥Ä S·¥ú ô M·¥è·¥†…™·¥á", 
      "Us·¥á : .film <“ì…™ ü·¥ç …¥·¥Ä·¥ç·¥á>\n‚ùÖ ·¥áx: .film Deadpool\n ·¥Ö·¥Ä Ä·¥ã: S…™…¥ ú·¥Ä ü·¥Äs·¥ú ô M·¥è·¥†…™·¥á L…™s·¥õ"));
  }

  try {
    // Step 1: Cache ‡∂ë‡∂ö‡∑ö ‡∂†‡∑í‡∂≠‡∑ä‚Äç‡∂ª‡∂¥‡∂ß ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î ‡∂≠‡∑í‡∂∂‡∑ö‡∂Ø‡∑ê‡∂∫‡∑í ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    const cacheKey = `film_search_${q.toLowerCase()}`;
    let searchData = searchCache.get(cacheKey);

    if (!searchData) {
      const searchUrl = `https://apis.davidcyriltech.my.id/movies/search?query=${encodeURIComponent(q)}`;
      let retries = 3;
      while (retries > 0) {
        try {
          const searchResponse = await axios.get(searchUrl, { timeout: 5000 });
          searchData = searchResponse.data;
          break;
        } catch (error) {
          retries--;
          if (retries === 0) throw new Error("Failed to obtain information from the Film Treasury");
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }

      if (!searchData.status || !searchData.results || searchData.results.length === 0) {
        throw new Error("No movies found in sinhalasub site");
      }

      searchCache.set(cacheKey, searchData);
    }

    // Step 2: ‡∂†‡∑í‡∂≠‡∑ä‚Äç‡∂ª‡∂¥‡∂ß ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä format ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    let filmList = `‚ùÑÔ∏è *FROZEN CINEMATIC VAULT* ‚ùÑÔ∏è\n\n`;
    const films = searchData.results.map((film, index) => ({
      number: index + 1,
      title: film.title,
      imdb: film.imdb,
      year: film.year,
      link: film.link,
      image: film.image
    }));

    films.forEach(film => {
      filmList += `${frozenTheme.resultEmojis[0]} ${film.number}. *${film.title}*\n`;
      filmList += `   ${frozenTheme.resultEmojis[2]} IMDB: ${film.imdb}\n`;
      filmList += `   ${frozenTheme.resultEmojis[1]} Year: ${film.year}\n\n`;
    });
    filmList += `${frozenTheme.resultEmojis[8]} Select movie: Replay number\n`;
    filmList += `${frozenTheme.resultEmojis[9]} P·¥è·¥°·¥á Ä·¥Ö B è P·¥Ä·¥õ ú·¥ú·¥ç R·¥Ä·¥ä·¥Ä·¥ò·¥Ä·¥ãs ú·¥á.`;

    const sentMessage = await conn.sendMessage(from, {
      image: { url: films[0].image },
      caption: frozenTheme.box("Cinema exploration", filmList),
      ...frozenTheme.getForwardProps()
    }, { quoted: mek });

    // Step 3: ‡∂†‡∑í‡∂≠‡∑ä‚Äç‡∂ª‡∂¥‡∂ß ‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏ ‡∂∂‡∂Ω‡∑è ‡∑É‡∑í‡∂ß‡∑ì‡∂∏ (Single Event Listener)
    const filmSelectionHandler = async (update) => {
      const message = update.messages[0];
      if (!message.message || !message.message.extendedTextMessage) return;

      const userReply = message.message.extendedTextMessage.text.trim();
      if (message.message.extendedTextMessage.contextInfo.stanzaId !== sentMessage.key.id) return;

      const selectedNumber = parseInt(userReply);
      const selectedFilm = films.find(film => film.number === selectedNumber);

      if (!selectedFilm) {
        await conn.sendMessage(from, {
          text: frozenTheme.box("M·¥Ä…¥·¥ä·¥ú W·¥Ä Ä…¥…™…¥…¢", 
            "‚ùÖ Invalid selection.!\n  Select a movie number\n D·¥Ä Ä·¥ã …¥…™…¢ ú·¥õ are amazed"),
          ...frozenTheme.getForwardProps()
        }, { quoted: message });
        return;
      }

      // Remove film selection listener to prevent multiple listeners
      conn.ev.off("messages.upsert", filmSelectionHandler);

      // Step 4: ‡∂©‡∑Ä‡∑î‡∂±‡∑ä‡∂Ω‡∑ù‡∂©‡∑ä ‡∂Ω‡∑í‡∂±‡∑ä‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
      const downloadUrl = `https://apis.davidcyriltech.my.id/movies/download?url=${encodeURIComponent(selectedFilm.link)}`;
      let downloadData;
      let downloadRetries = 3;

      while (downloadRetries > 0) {
        try {
          const downloadResponse = await axios.get(downloadUrl, { timeout: 5000 });
          downloadData = downloadResponse.data;
          break;
        } catch (error) {
          downloadRetries--;
          if (downloadRetries === 0) throw new Error("Failed to get download link.");
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }

      if (!downloadData.status || !downloadData.movie || !downloadData.movie.download_links) {
        throw new Error("There is no download link for sinhalasub site.");
      }

      const downloadLinks = [];
      const allLinks = downloadData.movie.download_links;

      const sdLink = allLinks.find(link => link.quality === "SD 480p" && link.direct_download);
      if (sdLink) {
        downloadLinks.push({
          number: 1,
          quality: "SD Quality",
          size: sdLink.size,
          url: sdLink.direct_download
        });
      }

      let hdLink = allLinks.find(link => link.quality === "HD 720p" && link.direct_download);
      if (!hdLink) {
        hdLink = allLinks.find(link => link.quality === "FHD 1080p" && link.direct_download);
      }
      if (hdLink) {
        downloadLinks.push({
          number: 2,
          quality: "HD Quality",
          size: hdLink.size,
          url: hdLink.direct_download
        });
      }

      if (downloadLinks.length === 0) {
        throw new Error("SD ‡∑Ñ‡∑ù HD ‡∂ú‡∑î‡∂´‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂Ω‡∑í‡∂±‡∑ä‡∂ö‡∑ä ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠");
      }

      let downloadOptions = `${frozenTheme.resultEmojis[3]} *${selectedFilm.title}*\n\n`;
      downloadOptions += `${frozenTheme.resultEmojis[4]} *Choose quality*:\n\n`;
      downloadLinks.forEach(link => {
        downloadOptions += `${frozenTheme.resultEmojis[0]} ${link.number}. *${link.quality}* (${link.size})\n`;
      });
      downloadOptions += `\n${frozenTheme.resultEmojis[8]} Choose quality: Reply to the number.\n`;
      downloadOptions += `${frozenTheme.resultEmojis[9]} Powerd By Pathum Rajapakshe`;

      const downloadMessage = await conn.sendMessage(from, {
        image: { url: downloadData.movie.thumbnail || selectedFilm.image || "https://i.ibb.co/5Yb4VZy/snowflake.jpg" },
        caption: frozenTheme.box("Sinhalasub Movies", downloadOptions),
        ...frozenTheme.getForwardProps()
      }, { quoted: message });

      // Step 5: Quality selection awaits (Single Event Listener)
      const qualitySelectionHandler = async (updateQuality) => {
        const qualityMessage = updateQuality.messages[0];
        if (!qualityMessage.message || !qualityMessage.message.extendedTextMessage) return;

        const qualityReply = qualityMessage.message.extendedTextMessage.text.trim();
        if (qualityMessage.message.extendedTextMessage.contextInfo.stanzaId !== downloadMessage.key.id) return;

        const selectedQualityNumber = parseInt(qualityReply);
        const selectedLink = downloadLinks.find(link => link.number === selectedQualityNumber);

        if (!selectedLink) {
          await conn.sendMessage(from, {
            text: frozenTheme.box("M·¥Ä…¥·¥ä·¥ú W·¥Ä Ä…¥…™…¥…¢", 
              " Invalid quality!\n Choose a quality number\n D·¥Ä Ä·¥ã Ä·¥Ä è are amazed"),
            ...frozenTheme.getForwardProps()
          }, { quoted: qualityMessage });
          return;
        }

        // Remove quality selection listener to prevent multiple listeners
        conn.ev.off("messages.upsert", qualitySelectionHandler);

        // Step 6: ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä‡∑ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂∏‡∑è‡∂´‡∂∫ ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
        const sizeStr = selectedLink.size.toLowerCase();
        let sizeInGB = 0;
        if (sizeStr.includes("gb")) {
          sizeInGB = parseFloat(sizeStr.replace("gb", "").trim());
        } else if (sizeStr.includes("mb")) {
          sizeInGB = parseFloat(sizeStr.replace("mb", "").trim()) / 1024;
        }

        if (sizeInGB > 2) {
          await conn.sendMessage(from, {
            text: frozenTheme.box("D·¥Ä Ä·¥ã W·¥Ä Ä…¥…™…¥…¢", 
              ` The product is too big. (${selectedLink.size})!\n  Download directly: ${selectedLink.url}\n Choose a small quality`),
            ...frozenTheme.getForwardProps()
          }, { quoted: qualityMessage });
          return;
        }

        // Step 7: ‡∂†‡∑í‡∂≠‡∑ä‚Äç‡∂ª‡∂¥‡∂ß‡∂∫ ‡∂Ω‡∑ö‡∂õ‡∂±‡∂∫‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∂ë‡∑Ä‡∑ì‡∂∏
        try {
          await conn.sendMessage(from, {
            document: { url: selectedLink.url },
            mimetype: "video/mp4",
            fileName: `${selectedFilm.title} - ${selectedLink.quality}.mp4`,
            caption: frozenTheme.box("S…™…¥ ú·¥Ä ü·¥Ä s·¥ú ô M·¥è·¥†…™·¥ás", 
              `${frozenTheme.resultEmojis[3]} *${selectedFilm.title}*\n${frozenTheme.resultEmojis[4]} «´·¥ú·¥Ä ü ü…™·¥õ è: ${selectedLink.quality}\n${frozenTheme.resultEmojis[2]} B…™…¢ “ì…™ ü·¥á: ${selectedLink.size}\n\n${frozenTheme.resultEmojis[8]} Your item shines in the M·¥Ä…¥·¥ä·¥ú_M·¥Ö.!\n${frozenTheme.resultEmojis[9]} M·¥Ä…¥·¥ä·¥ú_·¥ç·¥Ö ·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è ·¥ò·¥Ä·¥õ ú·¥ú·¥ç  Ä·¥Ä·¥ä·¥Ä·¥ò·¥Ä·¥ãs ú·¥á`),
            ...frozenTheme.getForwardProps()
          }, { quoted: qualityMessage });

          await conn.sendMessage(from, { react: { text: frozenTheme.resultEmojis[0], key: qualityMessage.key } });
        } catch (downloadError) {
          await conn.sendMessage(from, {
            text: frozenTheme.box("s…™…¥ ú·¥Ä ü·¥Äs·¥ú ô ·¥°·¥Ä Ä…¥…™…¥…¢", 
              ` ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö…™…¥…¢ “ì·¥Ä…™ ü·¥Ö: ${downloadError.message}\n‚ùÖ ·¥Ö…™ Ä·¥á·¥Ñ·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö: ${selectedLink.url}\n ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥`),
            ...frozenTheme.getForwardProps()
          }, { quoted: qualityMessage });
        }
      };

      // Register quality selection listener
      conn.ev.on("messages.upsert", qualitySelectionHandler);
    };

    // Register film selection listener
    conn.ev.on("messages.upsert", filmSelectionHandler);

  } catch (e) {
    console.error("‡∂Ø‡∑ù‡∑Ç‡∂∫:", e);
    const errorMsg = frozenTheme.box("S…™…¥ ú·¥Ä ü·¥Äs·¥ú ô A·¥õ·¥õ·¥Ä…¥·¥õ…™·¥è…¥", 
      `‚ùÖ ‡∂Ø‡∑ù‡∑Ç‡∂∫: ${e.message || "s…™…¥ ú·¥Ä ü·¥Äs·¥ú ô destroyed the treasury"}\n‚ùÖ The s…™…¥ ú·¥Ä ü·¥Äs·¥ú ô s…™·¥õ·¥á is closed.\n‚ùÖ F…™x·¥á·¥Ö ·¥¢·¥è·¥è…¥ T Ä è  ü·¥Ä…™·¥õ·¥á Ä`);
    
    await reply(errorMsg);
    await conn.sendMessage(from, { react: { text: "‚ùå", key: mek.key } });
  }
});
